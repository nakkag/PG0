プログラミング言語 PG0.5
micro:bit用API
--
■はじめに
PG0ではmicro:bitを使うためのAPIを用意しています。

■micro:bitについて
BBC micro:bit（ https://microbit.org/ja/ ）はプログラミング可能な小さなコンピューターです。
25個のLED、2個のボタン、明るさセンサー、温度センサー、加速度センサー、磁力センサー、無線通信機能がついていま
す。
※「BBC micro:bit」はMicro:bit Educational Foundationの登録商標です。


■PG0でmicro:bit
PG0でmicro:bitを使うには常時USBケーブルでPCとmicro:bitを接続しておく必要があります。
PG0は最初のプログラム実行時にmicro:bitにPG0用のHEXファイル(MicroPythonファームウェア)をmicro:bitに転送します。
その後はPG0での処理を随時micro:bitに送信します。
これによりプログラム実行中の変数の内容をPG0で確認しながら動かすことが可能となっています。
HEXファイルの置き換えは最初のプログラム実行時のみとなっているため2回目の実行からはすぐにプログラムを動かすこと
ができます。

micro:bitとの連携はPG0.5の機能で行うため開発画面ではメニューの「PG0.5」にチェックを入れてPG0.5モードにしておく
ことをお勧めします。

PG0で出来ること
- micro:bit用APIにある制御
- プログラムのステップ実行や停止、カーソル位置まで実行など
- 実行中の変数の確認
- 大きいプログラムの実行
  →PC側でプログラムが動くため

PG0で出来ないこと
- USBケーブルを抜いた状態での実行
- シリアル通信をするプログラム
  →PG0の実行はmicro:bitとのシリアル通信を利用しているため

■サンプル
以下を参照してください。
  「PG0でmicro:bitのプログラムを書く方法」
  https://qiita.com/nakka_/items/4f2414e1603027490a01

■micro:bit用APIリファレンス
PG0でmicro:bit用のAPIを使うにはmicro:bit用ライブラリをインポートする必要があります。
	#import("microbit")

□基本
sleep(time)
	[説明]
		一定時間待機します。
	[引数]
		time - 待機する時間をミリ秒で指定します。
	[戻り値]
		0

rand()
	[説明]
		乱数を取得します。
		乱数のシードは現在時間で初期化されています。
	[引数]
		なし
	[戻り値]
		生成された乱数を整数で返します。

running_time()
	[説明]
		micro:bitの実行時間を取得します。
		micro:bitのリセットボタンを押すと0に初期化されます。
	[引数]
		なし
	[戻り値]
		micro:bitの実行時間をミリ秒で返します。

temperature()
	[説明]
		micro:bitから温度を取得します。
	[引数]
		なし
	[戻り値]
		micro:bitの温度を摂氏で返します。

light_level()
	[説明]
		micro:bitから明るさを取得します。
	[引数]
		なし
	[戻り値]
		明度を表す0から255を返します。値が大きいほど強い明度となります。

□LED
led_show_string(str)
	[説明]
		micro:bitのLEDに文字列を表示します。
		1文字の場合は表示し続けて、2文字以上の場合はスクロールして表示します。
		英数字記号のみ表示可能で日本語は表示できません。
	[引数]
		str - 表示する文字列か数値を指定します。
	[戻り値]
		0

led_show_leds(array)
	[説明]
		micro:bitのLEDにイメージを表示します。
	[引数]
		Array - 5x5の大きさの配列を指定します。
				5x5より小さい配列の場合は残りを0で埋めます。
				配列の中の数値は0～9で明るさを指定します。
	[戻り値]
		0

led_show_icon(str)
	[説明]
		micro:bitのLEDに用意されたアイコンを表示します。
	[引数]
		str - 表示するアイコンの名前を指定します。
			以下が登録されている名前です。
			heart, small_heart, yes, no, happy, sad, confused, angry, asleep, surprised, silly, fabulous, meh, 
			tshirt, rollerskate, duck, house, tortoise, butterfly, stickfigure, ghost, sword, giraffe, skull, 
			umbrella, snake, rabbit, cow, quarter_note, eigth_note, pitchfork, target, triangle, left_triangle, 
			chessboard, diamond, small_diamond, square, square_small, scissors, arrow_n, arrow_ne, arrow_e, 
			arrow_se, arrow_s, arrow_sw, arrow_w, arrow_nw
	[戻り値]
		成功したら0を返します。
		不明な名前の場合は-1を返します。

led_get_pixel(x, y)
	[説明]
		指定ピクセルの明るさを取得します。
	[引数]
		x - LEDの横位置を0～4で指定します。
		y - LEDの縦位置を0～4で指定します。
	[戻り値]
		明るさを0～9で返します。

led_set_pixel(x, y)
	[説明]
		指定ピクセルの明るさを設定します。
	[引数]
		x - LEDの横位置を0～4で指定します。
		y - LEDの縦位置を0～4で指定します。
		value - 明るさを0～9で指定します。
	[戻り値]
		0

led_on()
	[説明]
		micro:bitのLEDを有効にします。
	[引数]
		なし
	[戻り値]
		0

led_off()
	[説明]
		micro:bitのLEDを無効にします。
	[引数]
		なし
	[戻り値]
		0

□ボタン
button_a_is_pressed()
	[説明]
		micro:bitのボタンAが押されているかを取得します。
	[引数]
		なし
	[戻り値]
		ボタンAが押されていれば1、押されていなければ0を返します。

button_a_get_presses()
	[説明]
		前回の呼び出し以降にmicro:bitのボタンAが押された回数を取得します。
	[引数]
		なし
	[戻り値]
		ボタンAが押された回数です。
		本APIを呼ぶと回数は0にリセットされます。

button_b_is_pressed()
	[説明]
		micro:bitのボタンBが押されているかを取得します。
	[引数]
		なし
	[戻り値]
		ボタンBが押されていれば1、押されていなければ0を返します。

button_b_get_presses()
	[説明]
		前回の呼び出し以降にmicro:bitのボタンBが押された回数を取得します。
	[引数]
		なし
	[戻り値]
		ボタンBが押された回数です。
		本APIを呼ぶと回数は0にリセットされます。

□PIN
micro:bitのPINは0～16と19～20を利用できます。
3, 4, 6, 7, 9, 10はディスプレイに使われているため他の用途で利用する場合はLEDを無効にする必要があります。

pin_read_digital(pin)
	[説明]
		PINのデジタル値を取得します。
	[引数]
		PIN - PIN番号を指定します。
	[戻り値]
		PINがハイの場合は1を返し、ローの場合は0を返します。

pin_write_digital(pin, value)
	[説明]
		PINにデジタル値を設定します。
	[引数]
		PIN - PIN番号を指定します。
		value - 1の場合はハイに設定し、0の場合はローに設定します。
	[戻り値]
		0

pin_read_analog(pin)
	[説明]
		PINの電圧を取得します。
	[引数]
		PIN - PIN番号を指定します。
	[戻り値]
		PINの電圧(0～1023(3.3V))を返します。

pin_write_analog(pin, value)
	[説明]
		PWM信号をPINに出力します。
	[引数]
		PIN - PIN番号を指定します。
		value - 0(時間幅周期0%)から1023(時間幅周期 100%)の間の数値を指定します。
	[戻り値]
		0

pin_set_analog_period(pin, period)
	[説明]
		PWM信号の周期をマイクロ秒単位で指定します。
	[引数]
		PIN - PIN番号を指定します。
		period - PWM信号の周期をマイクロ秒単位で指定します。最小値は256μsです。
	[戻り値]
		0

□コンパス
calibrate_compass()
	[説明]
		micro:bitでコンパスの調整処理を開始します。
	[引数]
		なし
	[戻り値]
		調整が成功したら1を、失敗したら0を返します。

compass_heading()
	[説明]
		3軸の磁力から計算された方位を取得します。
	[引数]
		なし
	[戻り値]
		時計回りの角度を示す0から360までの整数で、0は北となります。

□磁力センサー
magnetic_force_x()
	[説明]
		micro:bitからx軸の磁場強度を取得します。
	[引数]
		なし
	[戻り値]
		x軸の磁場強度を磁場の方向に応じて正または負の整数値(ナノテスラ)で返します。

magnetic_force_y()
	[説明]
		micro:bitからy軸の磁場強度を取得します。
	[引数]
		なし
	[戻り値]
		y軸の磁場強度を磁場の方向に応じて正または負の整数値(ナノテスラ)で返します。

magnetic_force_z()
	[説明]
		micro:bitからz軸の磁場強度を取得します。
	[引数]
		なし
	[戻り値]
		z軸の磁場強度を磁場の方向に応じて正または負の整数値(ナノテスラ)で返します。

magnetic_strength()
	[説明]
		micro:bitから磁場の強さを取得します。
	[引数]
		なし
	[戻り値]
		磁場の強さを示す整数値(ナノテスラ)を返します。

□加速度センサー
current_gesture()
	[説明]
		micro:bitから現在のジェスチャーを取得します。
	[引数]
		なし
	[戻り値]
		"up", "down", "left", "right", "face up", "face down", "freefall", "3g", "6g", "8g", "shake"の
		いずれかになります。

was_gesture(name)
	[説明]
		micro:bitから前回の呼び出し以降に指定した名前のジェスチャーが認識されたかを取得します。
	[引数]
		name - ジェスチャーを指定します。
			指定可能なジェスチャーは"up", "down", "left", "right", "face up", "face down", "freefall", "3g",
			"6g", "8g", "shake"のいずれかになります。
	[戻り値]
		前回呼び出し以降に認識されていれば1、認識されていなければ0を返します。

acceleration_x()
	[説明]
		micro:bitからx軸の加速度を取得します。
	[引数]
		なし
	[戻り値]
		方向に応じて正または負の整数値(±2000mgの範囲内)を返します。

acceleration_y()
	[説明]
		micro:bitからy軸の加速度を取得します。
	[引数]
		なし
	[戻り値]
		方向に応じて正または負の整数値(±2000mgの範囲内)を返します。

acceleration_z()
	[説明]
		micro:bitからz軸の加速度を取得します。
	[引数]
		なし
	[戻り値]
		方向に応じて正または負の整数値(±2000mgの範囲内)を返します。

□無線通信
radio_set_group(group)
	[説明]
		送受信のグループを指定します。
	[引数]
		group - グループ番号を指定します。0～255までの整数で指定します。
				初期値は0となっています。
	[戻り値]
		0

radio_set_power(power)
	[説明]
		送受信の信号強度を指定します。
		数値が小さいと近くの端末にしか信号が届きません。数値が大きいと遠くの端末にまで信号が届きます。
	[引数]
		power - 信号強度を指定します。0～7までの整数で指定します。
				初期値は6となっています。
	[戻り値]
		0

radio_send_string(str)
	[説明]
		文字列をmicro:bitの無線通信を使って送信します。
	[引数]
		str - 送信する文字列を指定します。最大251文字までとなっています。
	[戻り値]
		0

radio_receive_string()
	[説明]
		micro:bitの無線通信で文字列を受信します。
	[引数]
		なし
	[戻り値]
		受信した文字列です。受信しなかった場合は空の文字列("")となります。

□Music
music_playtone(note)
	[説明]
		指定された周波数を指定した時間再生します。
	[引数]
		note - 周波数を整数で指定します。
			周波数についてはTable of note frequenciesを参考にしてください。
	[戻り値]
		0

music_stop()
	[説明]
		再生を停止します。
	[引数]
		なし
	[戻り値]
		0

■ライセンス
「BBC micro:bit」はMicro:bit Educational Foundationの登録商標です。

micro:bit用モジュールでは MicroPython と uFlash を利用しています。

MicroPython - https://micropython.org/
----
MicroPython license information
===============================

The MIT License (MIT)

Copyright (c) 2013-2017 Damien P. George, and others

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
----

uFlash - https://github.com/ntoll/uflash
----
Copyright (c) 2015-2018 Nicholas H.Tollervey and others.

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
----

--
Copyright (C) 1996-2021 by Ohno Tomoaki. All rights reserved.
    WEB SITE: https://www.nakka.com/
    E-MAIL: nakka@nakka.com
